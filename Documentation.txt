//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

pos_offset(x offset, y offset, object) - adds the offsets to each axis


txt_align(x alignment, y alignment, text object) - centers text based on the two alignment operators


center_on(obj to be centered, center frame, offset) - centers an object on another with an applied offset


add_to_scene(window, sprites) - Adds all sprites given


rotate(degrees) - Sets a sprites angle to a set position 

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Class: Movement(Movement speed)

  Attributes:
  Movement.ms - The speed at wich the object will move (int)

  Movement.mkdict - A dictionary used to apply x and y offsets to an object

  Movement.mklist - A list of all keys that can be pressed (Arrow keys)

  Movement.dirlist - A dictionary of all directions described by strings ‘up’,  ‘down’,  ‘left’,  ‘right’ and their offsets


  Methods:
  Movement.arrow_move(sprite) - Applies movement to the object provided

  Movement.spin(speed, sprite) - Rotates the object at a set speed

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Class Cursor(Cursor hitbox: must be a sprite in the scene, List of all objects in scene)
  
  Attributes:
  Cursor.c - The sprite in the scene that gives the cursor it's hitbox
  
  Cursor.ojl = The list of object fed into the class instance
  
  
  Methods:
  Cursor.lock() - Makes Cursor.c follow the mouse
  
  (WORK IN PROGRESS)Cursor.detect() - Draws from Cursor.ojl and detects the sprite that Cursor.c is colliding with

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

For all of these examples i am going to asume that you have imported both tsapp and tsapp_helper, I will be shortening them to ts for tsapp
and h for tsapp_helper
	
Example Scripts:
	
	Movement Class Example:
	|||||||||||||||||||||||||||||||||||||||||||||||||||||
		window = ts.GraphicsWindow()
		mover = h.Movement(5)

		bg = ts.Sprite('Scene_bg.jpg', 100, 100)
		obj = ts.Sprite('Circle.png', 100, 100)

		h.add_to_scene(window, bg, obj)
		
		while window.is_running:
			window.finish_frame()
			mover.arrow_move(obj)
	|||||||||||||||||||||||||||||||||||||||||||||||||||||
	This will apply arrow key movement to the object obj in a window
        |||||||||||||||||||||
        Cursor Class Example:
        |||||||||||||||||||||||||||||||||||||||||||||||||||||
		window = ts.GraphicsWindow(800, 800, ts.BLACK)
		mover = h.Movement(5)
		
		hitbox = ts.Sprite('WhiteSquare.png', 0, 0)
		obj1 = ts.Sprite('RedSquare.png', 100, 100)
		obj2 = ts.Sprite('BlueSquare.png', 200, 200)
		
		olist = h.add_to_scene(window, obj1, obj2, hitbox)
		
		cursor = h.Cursor(hitbox, olist)
		while window.is_running:
			window.finish_frame()
			
			scan = cursor.detect()
			mover.spin(5, scan)
	|||||||||||||||||||||||||||||||||||||||||||||||||||||
	This will make an 800 by 800 window with two objects visible, 
	the objects will spin when you hover over them. This is due
	to mouse.detect() sensing the sprite in the scene and spinning
	it.

This script will add ‘filler.png’ into the scene and it will spin to the left at the speed 3, you can move the png around the scene by using the arrow keys.
